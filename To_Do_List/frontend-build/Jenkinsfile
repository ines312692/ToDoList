pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-frontend-build'
            defaultContainer 'docker'
            namespace 'jenkins-developer'
            serviceAccount 'jenkins-deployer'
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKERHUB_IMAGE = 'todo-frontend'
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
        DOCKER_BUILDKIT = '1'

        NODE_MODULES_PVC_PATH = '/mnt/node_modules_cache'
        DOCKER_CACHE_PVC_PATH = '/var/lib/docker'
        WORKSPACE_PVC_PATH = '/mnt/workspace_cache'
        ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    }

    stages {

        stage('Workspace & Cache Setup') {
            steps {
                script {
                    sh '''
                        echo "=== Utilisation directe du workspace depuis PVC ==="
                        cd ${WORKSPACE_PVC_PATH}

                        # Création du dossier projet si inexistant
                        mkdir -p ${WORKSPACE_PVC_PATH}/To_Do_List
                        cd ${WORKSPACE_PVC_PATH}/To_Do_List

                        echo "=== Lien symbolique pour node_modules ==="
                        mkdir -p ${NODE_MODULES_PVC_PATH}/node_modules
                        if [ -d "node_modules" ] && [ ! -L "node_modules" ]; then
                            echo "Suppression de l'ancien dossier node_modules"
                            rm -rf node_modules
                        fi
                        if [ ! -L "node_modules" ]; then
                            ln -s ${NODE_MODULES_PVC_PATH}/node_modules node_modules
                        fi
                    '''
                }
            }
        }

        stage('Dependencies Installation') {
            steps {
                container('node') {
                    dir("${WORKSPACE_PVC_PATH}/To_Do_List") {
                        script {
                            sh '''
                                echo "=== Installation des dépendances avec cache PVC ==="

                                # Vérifie si le cache existe
                                if [ "$(ls -A node_modules)" ]; then
                                    echo "Le cache existe, vérification des mises à jour éventuelles"
                                    if [ "$(npm outdated --json | jq length)" -gt 0 ]; then
                                        echo "Mise à jour détectée, réinstallation..."
                                        rm -rf node_modules/*
                                        npm ci
                                    else
                                        echo "Cache node_modules valide, pas de réinstallation"
                                    fi
                                else
                                    echo "Pas de cache, installation initiale"
                                    npm ci
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                dir("${WORKSPACE_PVC_PATH}/To_Do_List") {
                    script {
                        sh '''
                            echo "=== Construction de l'image Docker avec BuildKit ==="
                            DOCKER_BUILDKIT=1 docker build \
                              --build-arg BUILDKIT_INLINE_CACHE=1 \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                              .
                        '''
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo "=== Poussée de l'image Docker vers Docker Hub ==="
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
                '''
            }
        }

        stage('Build Artefacts Output') {
            steps {
                container('node') {
                    dir("${WORKSPACE_PVC_PATH}/To_Do_List") {
                        script {
                            sh '''
                                echo "=== Build Angular avec output direct dans le PVC des artefacts ==="
                                ARTIFACT_DIR=${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}
                                mkdir -p $ARTIFACT_DIR
                                npm run build -- --output-path=$ARTIFACT_DIR
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Cleanup') {
            steps {
                sh '''
                    echo "Nettoyage Docker"
                    docker system prune -f --filter "until=24h"
                '''
            }
        }
    }

    post {
        always {
            script {
                sh 'echo "Pipeline terminé."'
            }
        }
        success {
            echo "Build frontend réussi avec usage direct des PVCs !"
        }
        failure {
            echo "Échec du build frontend"
        }
    }
}
