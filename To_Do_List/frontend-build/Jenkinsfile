pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-frontend-build'
            defaultContainer 'docker'
            namespace 'jenkins-developer'
            serviceAccount 'jenkins-deployer'
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKERHUB_IMAGE = 'todo-frontend'
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
        DOCKER_BUILDKIT = '1'
        NODE_MODULES_PVC_PATH = '/mnt/node_modules_cache'
        WORKSPACE_PVC_PATH    = '/mnt/workspace_cache'
        ARTIFACTS_PVC_PATH    = '/mnt/artifacts'
    }

    stages {
        stage('Prepare Workspace (Direct PVC Link)') {
            steps {
                container('node') {
                    script {
                        sh '''
                            echo "=== Préparation du workspace avec lien direct PVC ==="

                            mkdir -p ${WORKSPACE_PVC_PATH}/frontend
                            if [ ! -L "To_Do_List" ]; then
                                ln -s ${WORKSPACE_PVC_PATH}/frontend To_Do_List
                            fi

                            mkdir -p ${NODE_MODULES_PVC_PATH}/node_modules
                            if [ ! -L "To_Do_List/node_modules" ]; then
                                ln -s ${NODE_MODULES_PVC_PATH}/node_modules To_Do_List/node_modules
                            fi
                        '''
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                container('node') {
                    dir('To_Do_List') {
                        script {
                            sh '''
                                echo "=== Installation des dépendances ==="

                                if [ "$(ls -A node_modules)" ]; then
                                    echo "node_modules existe"

                                    if [ "$(npm outdated --json | jq length)" -gt 0 ]; then
                                        echo "Dépendances obsolètes, réinstallation..."
                                        rm -rf node_modules/*
                                        npm ci
                                    else
                                        echo "Cache valide, aucune mise à jour"
                                    fi
                                else
                                    echo "node_modules vide, installation initiale"
                                    npm ci
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('To_Do_List') {
                    script {
                        sh '''
                            echo "=== Build de l'image Docker avec BuildKit ==="
                            DOCKER_BUILDKIT=1 docker build \
                              --build-arg BUILDKIT_INLINE_CACHE=1 \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                              .
                        '''
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo "=== Push de l'image vers DockerHub ==="
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
                '''
            }
        }

        stage('Save Artifacts') {
            steps {
                script {
                    sh '''
                        echo "=== Sauvegarde des artefacts ==="

                        if [ -d "To_Do_List/dist" ]; then
                            mkdir -p ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}
                            cp -r To_Do_List/dist/* ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}/
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            sh 'echo "Pipeline terminé."'
        }
        success {
            echo " Build frontend réussi avec cache PVC et workspace lié directement."
        }
        failure {
            echo "Échec du build frontend."
        }
    }
}
