pipeline {
  agent {
    kubernetes {
      label 'jenkins-frontend-build'
      namespace 'jenkins-developer'
      serviceAccount 'jenkins-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'todo-frontend'
    IMAGE_TAG = 'latest'
    DOCKER_BUILDKIT = '1'
    WORKSPACE_DIR = '/workspace/frontend-build'
    NODE_MODULES_DIR = '/node_modules'
  }

  stages {
    stage('Checkout & Prepare Workspace') {
      steps {
        script {
          sh '''
            echo "Setting up persistent workspace at $WORKSPACE_DIR"
            mkdir -p $WORKSPACE_DIR
            if [ ! -d "$WORKSPACE_DIR/To_Do_List" ]; then
              cp -r . $WORKSPACE_DIR/
            fi
          '''
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        dir("$WORKSPACE_DIR/To_Do_List") {
          sh '''
            echo "Checking for existing node_modules..."
            if [ ! -d "$NODE_MODULES_DIR" ]; then
              echo "Installing dependencies..."
              npm ci
            else
              echo "Reusing existing node_modules from PVC"
            fi
          '''
        }
      }
    }

    stage('Docker Login') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh '''
            echo "Logging into Docker Hub..."
            echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
          '''
        }
      }
    }

    stage('Build Frontend Image') {
      steps {
        dir("$WORKSPACE_DIR/To_Do_List") {
          sh '''
            echo "Building frontend Docker image with Docker BuildKit..."
            DOCKER_BUILDKIT=1 docker build \
              -t $DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:$IMAGE_TAG \
              .
          '''
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        sh '''
          echo "Pushing frontend image..."
          docker push $DOCKERHUB_USERNAME/$DOCKERHUB_IMAGE:$IMAGE_TAG
        '''
      }
    }

    stage('Cleanup') {
      steps {
        sh '''
          echo "Cleaning up old Docker images to preserve space..."
          docker system prune -f --filter "until=24h"
        '''
      }
    }
  }

  post {
    always {
      sh '''
        echo "Saving build artifacts to persistent storage..."
        mkdir -p /artifacts/build-$(date +%Y%m%d-%H%M%S)
        cp -r $WORKSPACE_DIR/To_Do_List/dist /artifacts/build-$(date +%Y%m%d-%H%M%S)/ || true
      '''
    }
    success {
      echo "Frontend image built and pushed successfully with persistent cache!"
    }
    failure {
      echo "Frontend build or push failed."
    }
  }
}
