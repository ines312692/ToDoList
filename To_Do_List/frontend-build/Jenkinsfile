pipeline {
    agent {
        kubernetes {
            inheritFrom 'jenkins-frontend-build'
            defaultContainer 'docker'
            namespace 'jenkins-developer'
            serviceAccount 'jenkins-deployer'
        }
    }

    environment {
        DOCKERHUB_USERNAME = 'inestmimi123'
        DOCKERHUB_IMAGE = 'todo-frontend'
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
        DOCKER_BUILDKIT = '1'

        // Chemins PVC
        NODE_MODULES_PVC_PATH = '/mnt/node_modules_cache'
        DOCKER_CACHE_PVC_PATH = '/var/lib/docker'
        ARTIFACTS_PVC_PATH = '/artifacts'

        // Répertoire de travail dans le workspace Jenkins (sous-répertoire du projet Angular)
        WORK_DIR = "${WORKSPACE}/To_Do_List"
    }

    stages {
        stage('Setup Node Modules Cache') {
            steps {
                container('node') {
                    script {
                        sh '''
                            echo "=== Configuration du cache node_modules avec PVC ==="

                            # Vérifier que le répertoire To_Do_List existe
                            if [ ! -d "${WORKSPACE}/To_Do_List" ]; then
                                echo "ERREUR: Le répertoire To_Do_List n'existe pas dans ${WORKSPACE}"
                                ls -la "${WORKSPACE}"
                                exit 1
                            fi

                            # Créer le lien symbolique vers le cache PVC dans le bon répertoire
                            if [ -d "${WORK_DIR}/node_modules" ] && [ ! -L "${WORK_DIR}/node_modules" ]; then
                                echo "Suppression de l'ancien répertoire node_modules"
                                rm -rf "${WORK_DIR}/node_modules"
                            fi

                            # Créer le répertoire cache s'il n'existe pas
                            mkdir -p "${NODE_MODULES_PVC_PATH}/cache"

                            # Créer le lien symbolique vers le cache PVC
                            if [ ! -L "${WORK_DIR}/node_modules" ]; then
                                echo "Création du lien symbolique vers le cache PVC"
                                ln -sf "${NODE_MODULES_PVC_PATH}/cache" "${WORK_DIR}/node_modules"
                            fi

                            echo "Configuration du cache terminée"
                            echo "Contenu du répertoire de travail:"
                            ls -la "${WORK_DIR}" | head -10
                        '''
                    }
                }
            }
        }

        stage('Dependencies Installation') {
            steps {
                container('node') {
                    script {
                        sh '''
                            echo "=== Installation des dépendances avec cache PVC ==="
                            cd "${WORK_DIR}"

                            # Vérifier si package.json existe
                            if [ ! -f "package.json" ]; then
                                echo "ERREUR: package.json non trouvé dans ${WORK_DIR}"
                                exit 1
                            fi

                            # Vérifier si le cache contient des modules
                            if [ "$(ls -A ${NODE_MODULES_PVC_PATH}/cache 2>/dev/null || true)" ]; then
                                echo "Cache node_modules détecté, vérification des mises à jour"

                                # Comparer package-lock.json si il existe
                                if [ -f "package-lock.json" ] && [ -f "${NODE_MODULES_PVC_PATH}/package-lock.json.bak" ]; then
                                    if ! cmp -s "package-lock.json" "${NODE_MODULES_PVC_PATH}/package-lock.json.bak"; then
                                        echo "package-lock.json modifié, réinstallation nécessaire"
                                        rm -rf "${NODE_MODULES_PVC_PATH}/cache/*"
                                        npm ci
                                    else
                                        echo "Cache valide, pas de réinstallation nécessaire"
                                    fi
                                else
                                    echo "Première installation ou pas de package-lock.json"
                                    npm ci
                                fi
                            else
                                echo "Pas de cache, installation initiale"
                                npm ci
                            fi

                            # Sauvegarder package-lock.json pour la prochaine fois
                            if [ -f "package-lock.json" ]; then
                                cp "package-lock.json" "${NODE_MODULES_PVC_PATH}/package-lock.json.bak"
                            fi
                        '''
                    }
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Build Frontend Image') {
            steps {
                script {
                    sh '''
                        echo "=== Build de l'image Docker avec BuildKit et cache ==="
                        cd "${WORK_DIR}"

                        # Build avec cache Docker depuis PVC
                        DOCKER_BUILDKIT=1 docker build \
                          --build-arg BUILDKIT_INLINE_CACHE=1 \
                          --cache-from ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                          -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                          -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                          .
                    '''
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                sh '''
                    echo "=== Push des images vers Docker Hub ==="
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
                '''
            }
        }

        stage('Build Artifacts') {
            steps {
                container('node') {
                    script {
                        sh '''
                            echo "=== Build Angular et sauvegarde des artefacts dans PVC ==="
                            cd "${WORK_DIR}"

                            # Créer le répertoire de destination dans le PVC
                            ARTIFACT_DIR="${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}"
                            mkdir -p "$ARTIFACT_DIR"

                            # Build Angular directement dans le PVC
                            echo "Build en cours vers $ARTIFACT_DIR"
                            npm run build -- --output-path="$ARTIFACT_DIR"

                            # Créer un lien vers le dernier build
                            ln -sfn "$ARTIFACT_DIR" "${ARTIFACTS_PVC_PATH}/latest"

                            echo "Artefacts sauvegardés dans $ARTIFACT_DIR"
                            ls -la "$ARTIFACT_DIR" | head -10
                        '''
                    }
                }
            }
        }

        stage('Docker Cleanup') {
            steps {
                sh '''
                    echo "=== Nettoyage Docker ==="
                    # Garder les images récentes et nettoyer le reste
                    docker system prune -f --filter "until=24h"

                    # Optionnel: garder seulement les 3 dernières images de notre projet
                    docker images ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE} --format "table {{.Tag}}\t{{.CreatedAt}}" | \
                    tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}' | \
                    xargs -r -I {} docker rmi ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:{} || true
                '''
            }
        }
    }

    post {
        always {
            script {
                sh '''
                    echo "=== Informations finales ==="
                    echo "Build: ${BUILD_NUMBER}"
                    echo "Commit: ${GIT_COMMIT}"
                    echo "Image: ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}"

                    # Afficher l'utilisation de l'espace des PVCs
                    echo "=== Utilisation des PVCs ==="
                    df -h ${NODE_MODULES_PVC_PATH} || true
                    df -h ${ARTIFACTS_PVC_PATH} || true
                    df -h ${DOCKER_CACHE_PVC_PATH} || true
                '''
            }
        }
        success {
            echo "✅ Build frontend réussi avec optimisation PVC complète"
            script {
                sh '''
                    echo "Artefacts disponibles dans: ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}"
                    echo "Image Docker: ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}"
                '''
            }
        }
        failure {
            echo "❌ Échec du build frontend"
            script {
                sh '''
                    echo "=== Diagnostic d'erreur ==="
                    echo "Workspace: ${WORK_DIR}"
                    ls -la "${WORK_DIR}" || true
                    echo "Cache node_modules:"
                    ls -la "${NODE_MODULES_PVC_PATH}" || true
                '''
            }
        }
        cleanup {
            sh '''
                echo "=== Nettoyage final ==="
                # Déconnecter de Docker Hub
                docker logout || true
            '''
        }
    }
}
