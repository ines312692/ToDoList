pipeline { // Définition du pipeline Jenkins
    agent { // Spécifie l'agent d'exécution
        kubernetes { // Utilise un pod Kubernetes
            label 'jenkins-frontend-build' // Label du pod
            defaultContainer 'docker' // Conteneur par défaut
            namespace 'jenkins-developer' // Namespace Kubernetes
            serviceAccount 'jenkins-deployer' // Compte de service utilisé
        }
    }

    environment { // Variables d'environnement globales
        DOCKERHUB_USERNAME = 'inestmimi123' // Nom d'utilisateur DockerHub
        DOCKERHUB_IMAGE = 'todo-frontend' // Nom de l'image Docker
        IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}" // Tag de l'image (build + commit)
        DOCKER_BUILDKIT = '1' // Active BuildKit pour Docker
        NODE_MODULES_PVC_PATH = '/mnt/node_modules_cache' // Chemin du cache node_modules
        DOCKER_CACHE_PVC_PATH = '/var/lib/docker' // Chemin du cache Docker
        WORKSPACE_PVC_PATH = '/mnt/workspace_cache' // Chemin du cache workspace
        ARTIFACTS_PVC_PATH = '/mnt/artifacts' // Chemin du cache des artefacts
    }

    stages { // Définition des étapes du pipeline
        stage('Workspace Setup & Cache Restoration') { // Préparation du workspace et restauration du cache
            steps {
                script {
                    sh '''
                        echo "=== Configuration du workspace avec cache PVC ==="

                        # Restaure le workspace depuis le cache si disponible
                        if [ -d "${WORKSPACE_PVC_PATH}/frontend-build" ]; then
                            echo "Restauration du workspace depuis le cache PVC..."
                            rsync -av --delete ${WORKSPACE_PVC_PATH}/frontend-build/ ./
                        fi

                        # Vérifie et restaure le cache node_modules
                        if [ -d "${NODE_MODULES_PVC_PATH}" ]; then
                            echo "Vérification du cache node_modules..."
                            if [ -d "${NODE_MODULES_PVC_PATH}/node_modules" ]; then
                                echo "Lien symbolique vers node_modules depuis PVC."
                                ln -s ${NODE_MODULES_PVC_PATH}/node_modules ./To_Do_List/node_modules
                            fi
                        fi

                        echo "Workspace configuré avec succès"
                    '''
                }
            }
        }

       stage('Dependencies Installation') { // Installation des dépendances npm
           steps {
               container('node') { // Utilise le conteneur Node.js
                   dir('To_Do_List') { // Se place dans le dossier du frontend
                       script {
                           sh '''


                            echo "=== Installation des dépendances avec cache PVC ==="

                            mkdir -p "${NODE_MODULES_PVC_PATH}/node_modules" # Crée le dossier cache si absent
                            if [ -d "node_modules" ] && [ ! -L "node_modules" ]; then
                                echo "Suppression de l'ancien dossier node_modules"
                                rm -rf node_modules
                            fi
                            if [ ! -L "node_modules" ]; then
                                echo "Création du lien symbolique node_modules → ${NODE_MODULES_PVC_PATH}/node_modules"
                                ln -s ${NODE_MODULES_PVC_PATH}/node_modules node_modules
                            fi

                            # Vérifie si le cache existe
                            if [ "$(ls -A node_modules)" ]; then
                                echo "Le cache existe, vérification des mises à jour éventuelles"

                                if [ "$(npm outdated --json | jq length)" -gt 0 ]; then
                                    echo "Mise à jour détectée, réinstallation..."
                                    rm -rf node_modules/*
                                    npm ci #installe les dépendances du projet à partir du fichier package-lock.json.
                                else
                                    echo "Cache node_modules valide, pas de réinstallation"
                                fi
                            else
                                echo "Pas de cache, installation initiale"
                                npm ci
                            fi
                           '''
                       }
                   }
               }
           }
       }

        stage('Docker Login') { // Connexion à DockerHub
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Build Frontend Image') { // Construction de l'image Docker du frontend
            steps {
                dir('To_Do_List') { // Se place dans le dossier du frontend
                    script {
                        sh '''
                            DOCKER_BUILDKIT=1 docker build \
                              --build-arg BUILDKIT_INLINE_CACHE=1 \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                              -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                              .
                        '''
                    }
                }
            }
        }

        stage('Push to Docker Hub') { // Pousse l'image sur DockerHub
            steps {
                sh '''
                    echo "Pushing frontend image..."
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
                    docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
                '''
            }
        }

        stage('Cache Persistence & Cleanup') { // Sauvegarde du cache et nettoyage
            steps {
                script {
                    sh '''
                        echo "=== Sauvegarde du workspace et nettoyage ==="

                        mkdir -p ${WORKSPACE_PVC_PATH}/frontend-build
                        cp -r . ${WORKSPACE_PVC_PATH}/frontend-build/

                        # Sauvegarde des artefacts de build
                        if [ -d "To_Do_List/dist" ]; then
                            mkdir -p ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}
                            cp -r To_Do_List/dist/* ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}/
                        fi

                        echo "Workspace et artefacts sauvegardés."

                        docker system prune -f # Nettoyage Docker
                    '''
                }
            }
        }
    }

    post { // Actions post-pipeline
        always {
            script {
                sh '''
                    echo "Pipeline terminé."
                '''
            }
        }
        success {
            echo " Build frontend réussi avec cache PVC optimisé et hors ligne!"
        }
        failure {
            echo " Échec du build frontend"
        }
    }
}
