pipeline {
  agent {
    kubernetes {
      inheritFrom 'jenkins-backend-build'
      defaultContainer 'docker'
      namespace 'jenkins-developer'
      serviceAccount 'jenkins-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'todo-backend'
    IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
    DOCKER_BUILDKIT = '1'
    NODE_MODULES_PVC_PATH = '/mnt/node_modules_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
    WORK_DIR = "${WORKSPACE}/To_Do_List_Backend"
  }

  stages {

    stage('Dependencies Installation') {
      steps {
        container('node') {
          script {
            sh '''
              cd "${WORK_DIR}"

              if [ ! -f "package.json" ]; then
                  echo "package.json manquant. Échec."
                  exit 1
              fi

              npm config set cache ${NODE_MODULES_PVC_PATH}/.npm --global
              echo "Installation des dépendances npm avec cache partagé PVC"
              npm ci --offline --loglevel verbose --cache=${NODE_MODULES_PVC_PATH}/.npm
            '''
          }
        }
      }
    }

    stage('Docker Login') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh 'echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin'
          }
        }
      }
    }

    stage('Build Backend Image') {
      steps {
        container('docker') {
          dir('To_Do_List_Backend') {
            sh '''
              DOCKER_BUILDKIT=1 docker build \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest .
            '''
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        container('docker') {
          sh '''
            docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG}
            docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest
          '''
        }
      }
    }

    stage('Artifacts Persistence') {
      steps {
        container('node') {
          sh '''
            if [ -d "${WORK_DIR}/dist" ]; then
              mkdir -p ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}
              cp -r ${WORK_DIR}/dist/* ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}/
            fi
          '''
        }
      }
    }

    stage('Cleanup Docker') {
      steps {
        container('docker') {
          sh '''
            docker system prune -f --filter "until=24h" || true
          '''
        }
      }
    }
  }

  post {
    always {
      echo "=== Pipeline terminé ==="
    }
    success {
      echo "Image backend construite et poussée avec succès !"
    }
    failure {
      echo "Échec du pipeline backend."
    }
    cleanup {
      sh 'docker logout || true'
    }
  }
}
