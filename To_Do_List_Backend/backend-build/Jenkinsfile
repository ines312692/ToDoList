pipeline {
  agent {
    kubernetes {
      inheritFrom 'jenkins-backend-build'
      defaultContainer 'docker'
      namespace 'jenkins-developer'
      serviceAccount 'jenkins-deployer'
    }
  }

  environment {
    DOCKERHUB_USERNAME = 'inestmimi123'
    DOCKERHUB_IMAGE = 'todo-backend'
    IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
    DOCKER_BUILDKIT = '1'
    WORKSPACE_PVC_PATH = '/mnt/workspace_cache'
    ARTIFACTS_PVC_PATH = '/mnt/artifacts'
  }

  stages {
    stage('Workspace Setup') {
      steps {
        container('node') {
          sh '''
            echo "=== Ensuring node_modules directory exists on PVC ==="
            mkdir -p ${WORKSPACE_PVC_PATH}/node_modules
          '''
        }
      }
    }

    stage('Dependencies Installation') {
      steps {
        container('node') {
          dir("${WORKSPACE_PVC_PATH}/To_Do_List_Backend") {
            sh '''
              echo "=== Installing dependencies directly in PVC ==="
              # Link node_modules from PVC
              ln -sf ${WORKSPACE_PVC_PATH}/node_modules ./node_modules

              if [ -f package.json ]; then
                # Simple check without jq
                npm outdated > outdated.txt || true
                if [ -s outdated.txt ]; then
                  echo "Outdated dependencies detected, updating..."
                  rm -rf node_modules/*
                  npm ci
                elif [ ! -d node_modules ]; then
                  echo "No node_modules found, installing..."
                  npm ci
                else
                  echo "node_modules cache is valid, skipping installation"
                fi
              else
                echo "No package.json found, skipping installation"
              fi
            '''
          }
        }
      }
    }

    stage('Docker Login') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh '''
              echo "$PASSWORD" | docker login -u "$USERNAME" --password-stdin || {
                echo "Docker login failed"
                exit 1
              }
            '''
          }
        }
      }
    }

    stage('Build Backend Image') {
      steps {
        container('docker') {
          dir("${WORKSPACE_PVC_PATH}/To_Do_List_Backend") {
            sh '''
              echo "=== Building Docker image with BuildKit ==="
              DOCKER_BUILDKIT=1 docker build \
                --build-arg BUILDKIT_INLINE_CACHE=1 \
                --cache-from ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} \
                -t ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest \
                .
            '''
          }
        }
      }
    }

    stage('Push to Docker Hub') {
      steps {
        container('docker') {
          sh '''
            echo "=== Pushing Docker images ==="
            docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:${IMAGE_TAG} || exit 1
            docker push ${DOCKERHUB_USERNAME}/${DOCKERHUB_IMAGE}:latest || exit 1
          '''
        }
      }
    }

    stage('Artifacts Persistence & Cleanup') {
      steps {
        container('node') {
          sh '''
            echo "=== Saving build artifacts directly to PVC ==="
            if [ -d "${WORKSPACE_PVC_PATH}/To_Do_List_Backend/dist" ]; then
              mkdir -p ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}
              cp -r ${WORKSPACE_PVC_PATH}/To_Do_List_Backend/dist/* ${ARTIFACTS_PVC_PATH}/build-${BUILD_NUMBER}/ || {
                echo "Failed to copy artifacts"
              }
            else
              echo "No dist directory found, skipping artifact persistence"
            fi
          '''
        }
        container('docker') {
          sh '''
            echo "=== Cleaning up Docker resources ==="
            docker system prune -f --filter "until=24h" || echo "Docker cleanup failed"
          '''
        }
      }
    }
  }

  post {
    always {
      echo "=== Pipeline completed ==="
    }
    success {
      echo "Backend image built and pushed successfully with optimized PVC usage!"
    }
    failure {
      echo "Backend pipeline failed."
    }
  }
}
